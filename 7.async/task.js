class AlarmClock {
	constructor(alarmCollection, timerId) {
		this.alarmCollection = [];
		this.timerId = timerId;
	}
	addClock(time, callback, id) {
		//Проверьте, передан ли параметр id. Если параметр не передан, выполните выброс ошибки (с помощью throw new Error('error text')).
		if (this.id === undefined) {
			throw new Error('error text');
		}
		//Проверьте, есть ли какой-нибудь звонок с уже существующим id. Если есть, выведите ошибку (с помощью console.error()) и завершите выполнение метода. Программа должна продолжать работать, но звонок не должен быть добавлен.
		if (?) {
			console.error('Звонок с этим идентификатором уже существует');
			callback();
		} 
		//Перед завершением метода добавьте в массив звонков объект со свойствами id, time, callback.

	}
	removeClock(id) {
		//Удалите из массива звонков тот, у которого id совпадает с текущим. Например, можно использовать метод filter.
		//Верните логическое значение об успешности/провале удаления объекта звонка из общего массива.
	}
	getCurrentFormattedTime(time) {
		const now = new Date();
		return now.getHours() + ':' + now.getMinutes();
	}
	start() {
		//Создайте функцию проверки (checkClock), которая принимает звонок и проверяет: если текущее время совпадает со временем звонка, то вызывайте колбек.
		checkClock(?) {
			if (this.time === ?) {
				callback();
			}
		}
		//Если значение идентификатора текущего таймера отсутствует, то создайте новый интервал.
		//В этом интервале реализуйте функцию, которая будет перебирать все звонки, и для каждого вызывать функцию checkClock.
		//Результат функции setInterval сохраните в свойстве идентификатора текущего таймера.
	}
	stop() {
		//Сделайте проверку существования идентификатора текущего таймера.
		//Если у идентификатора текущего таймера есть значение, то вызовите функцию clearInterval для удаления интервала, а так же удалите значение из свойства "идентификатор текущего таймера".
	}
	printAlarms() {
		//С помощью метода forEach выведите информацию о каждом звонке (id и time).
	}
	clearAlarms() {
		//Вызывает метод остановки интервала.
		clearInterval();
		//Удаляет все звонки.
	}
}